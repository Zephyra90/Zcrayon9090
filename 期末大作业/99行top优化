%%%% A 99 LINE TOPOLOGY OPTIMIZATION CODE BY OLE SIGMUND, JANUARY 2000 %%%
%%%% CODE MODIFIED FOR INCREASED SPEED, September 2002, BY OLE SIGMUND %%%
function top(nelx,nely,volfrac,penal,rmin);
% INITIALIZE
nelx=75;      %x轴方向的单元数
nely=30;      %y轴方向的单元数
volfrac=0.5;     %体积率
penal=3.0;         %材料插值模型的惩罚因子
rmin=2;       %敏度过滤的半径
 x(1:nely,1:nelx) = volfrac;
%% 设置空白区域
%for ely = 1:nely
    %for elx = 1:nelx
       % if sqrt((ely-nely/2.)^2+(elx-nelx/3.)^2)<nely/3.
        %    passive(ely,elx) = 1;
         %   x(ely,elx) = 0.001;
       % else
       %     passive(ely,elx) = 0;
      %  end
  %  end
% end
%% 初始化
loop = 0;    %存放迭代次数的变量
change = 1.;     %存放连续两次迭代的设计变量的差值的最大值，用以判断迭代何时结束
% 开始迭代
while change > 0.01    %当两次迭代连续迭代的设计变量x的差值的最大值小于0.01时，迭代结束
  loop = loop + 1;      %每循环一次，跌代次数加一
  xold = x;           %把前一次的设计变量赋值给xold，用以后续计算新的change
% FE-ANALYSIS  调用有限元分析子程序
  [U]=FE(nelx,nely,x,penal);       %进行结构的有限元分析，返回结构的全局位移矩阵  
% 目标函数与灵敏度分析
  [KE] = lk;      %调用计算单元刚度矩阵的子程序，返回单元刚度矩阵    固体材料元素刚度矩阵都是一样，故元素刚度矩阵仅被调用一次
  c = 0.;        %用来存放目标函数的变量，这里目标函数是结构总刚度最大，即柔度最小
  %% 遍历所有元素来确定目标函数和敏度值
  for ely = 1:nely       %y方向迭代
    for elx = 1:nelx       %x方向对每个单元迭代，xy两个方向就是对所有单元进行循环同一种操作
      n1 = (nely+1)*(elx-1)+ely;    %所有节点中左上的节点数目
      n2 = (nely+1)* elx   +ely;    %所有节点中右上的节点数目
     % Ue = U([2*n1-1;2*n1; 2*n2-1;2*n2; 2*n2+1;2*n2+2; 2*n1+1;2*n1+2],1);     %从全局位移矩阵中，按自由度编号提取单元位移矩阵
     % c = c + x(ely,elx)^penal*Ue'*KE*Ue;               %计算目标函数的值(即总柔度)
     % dc(ely,elx) = -penal*x(ely,elx)^(penal-1)*Ue'*KE*Ue;  %计算设计域内每个单元相应的灵敏度值（即目标函数对设计变量的导数，指导设计变量迭代更新的方向）
      dc(ely,elx) = 0.;
      for i = 1
          Ue = U([2*n1-1;2*n1; 2*n2-1;2*n2; 2*n2+1;2*n2+2; 2*n1+1;2*n1+2],i);  %从整体位移矢量中提取元素位移矢量Ue
          c = c + x(ely,elx)^penal*Ue'*KE*Ue; 
          dc(ely,elx) = dc(ely,elx) - penal*x(ely,elx)^(penal-1)*Ue'*KE*Ue;
      end
    end
  end
%% 灵敏度分析子程序
%调用网格独立过滤器
 [dc]   = check(nelx,nely,rmin,x,dc);    %调用灵敏度过滤子程序，对灵敏度进行过滤，解决棋盘格式，同时使边界光滑
% 最优准则优化器
  [x]    = OC(nelx,nely,x,volfrac,dc);    %调用优化准则，更新设计变量
% PRINT RESULTS 打印结果
  change = max(max(abs(x-xold)));    %计算设计变量连续两次迭代的差值的绝对值的最大值，主循环在change小于0.01时终止
  disp([' It.: ' sprintf('%4i',loop) ' Obj.: ' sprintf('%10.4f',c) ...
       ' Vol.: ' sprintf('%6.3f',sum(sum(x))/(nelx*nely)) ...
 ' ch.: ' sprintf('%6.3f',change )])      %在屏幕上显示迭代步数、目标函数值、体积率、设计变量的最大差值等迭代信息
% PLOT DENSITIES  绘制最终结果的密度分布图
  colormap(gray); imagesc(-x); axis equal; axis tight; axis off;pause(1e-6);   %优化结果的图形显示，（将当前的密度场以灰度图的形式进行输出）
end
%%%%%%%%%% OPTIMALITY CRITERIA UPDATE优化准则更新 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% OC算法子程序
function [xnew]=OC(nelx,nely,x,volfrac,dc)  
l1 = 0; l2 = 100000; move = 0.2;   %%11、12用于体积约束的拉格朗日乘子，move为正的移动界限
while (l2-l1 > 1e-4)    
  lmid = 0.5*(l2+l1);
  xnew = max(0.001,max(x-move,min(1.,min(x+move,x.*sqrt(-dc./lmid)))) );   %此处为OC算法的核心，是公式（2）的具体反映
  %xnew(find(passive)) = 0.001; 
  if sum(sum(xnew)) - volfrac*nelx*nely > 0;    %采用二分法更新拉格朗日乘子
    l1 = lmid;
  else
    l2 = lmid;
  end
end
%%%%%%%%%% MESH-INDEPENDENCY FILTER %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% 灵敏度计算，网格过滤子程序
function [dcn]=check(nelx,nely,rmin,x,dc)
dcn=zeros(nely,nelx);
for i = 1:nelx
  for j = 1:nely
    sum=0.0; 
    for k = max(i-floor(rmin),1):min(i+floor(rmin),nelx)
      for l = max(j-floor(rmin),1):min(j+floor(rmin),nely)
       fac = rmin-sqrt((i-k)^2+(j-l)^2);      %计算过滤半径rmin内的某个单元x(1,k)的卷积算子
        sum = sum+max(0,fac);       %计算过滤半径rmin内所有单元的卷积算子之和
        dcn(j,i) = dcn(j,i) + max(0,fac)*x(l,k)*dc(l,k);   %计算
      end
    end
   dcn(j,i) = dcn(j,i)/(x(j,i)*sum);   %计算单元x(j,i)过滤后的灵敏度
  end
end
%%%%%%%%%% FE-ANALYSIS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% 有限元求解子程序
function [U]=FE(nelx,nely,x,penal)
[KE] = lk;     %调用计算单元刚度矩阵子程序，返回单元刚度矩阵
K = sparse(2*(nelx+1)*(nely+1), 2*(nelx+1)*(nely+1));   %总体刚度矩阵的稀疏矩阵
F = sparse(2*(nely+1)*(nelx+1),2); U = sparse(2*(nely+1)*(nelx+1),2);   %载荷力F和总位移矩阵U的稀疏矩阵
for elx = 1:nelx
  for ely = 1:nely
    n1 = (nely+1)*(elx-1)+ely; 
    n2 = (nely+1)* elx   +ely;
    edof = [2*n1-1; 2*n1; 2*n2-1; 2*n2; 2*n2+1; 2*n2+2; 2*n1+1; 2*n1+2]; %矩阵单元的八个自由度编号
    K(edof,edof) = K(edof,edof) + x(ely,elx)^penal*KE;  %将经过SIMP惩罚得到的单元刚度矩阵（即，x(ely,elx)^penal*KE）按照自由度累加，得到总体刚度矩阵
  end
end
% DEFINE LOADS AND SUPPORTS (HALF MBB-BEAM)
  F(2,1) = -1;%施加载荷（在节点相应方向施加载荷）
%F(2*(nelx)*(nely+1)+2,2) = 1.;
fixeddofs = [1:2:2*(nely+1),2*(nelx+1)*(nely+1)];     %施加约束（固定节点相应方向位移）
alldofs     = [1:2*(nely+1)*(nelx+1)];    %设计域内所有节点自由度
freedofs    = setdiff(alldofs,fixeddofs);    %设计域内所有自由节点的自由度
% SOLVING
U(freedofs,:) = K(freedofs,freedofs) \ F(freedofs,:);       %有限元求解，得到设计域内所有自由节点的位移 
U(fixeddofs,:)= 0;         %给所有固定的节点位移赋值为0
%%%%%%%%%% ELEMENT STIFFNESS MATRIX %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% 计算单元刚度矩阵子程序
function [KE]=lk
E = 1.;  % 杨氏模量
nu = 0.3; % 泊松比
k=[ 1/2-nu/6   1/8+nu/8 -1/4-nu/12 -1/8+3*nu/8 ... 
   -1/4+nu/12 -1/8-nu/8  nu/6       1/8-3*nu/8];
KE = E/(1-nu^2)*[ k(1) k(2) k(3) k(4) k(5) k(6) k(7) k(8)
                  k(2) k(1) k(8) k(7) k(6) k(5) k(4) k(3)
                  k(3) k(8) k(1) k(6) k(7) k(4) k(5) k(2)
                  k(4) k(7) k(6) k(1) k(8) k(3) k(2) k(5)
                  k(5) k(6) k(7) k(8) k(1) k(2) k(3) k(4)
                  k(6) k(5) k(4) k(3) k(2) k(1) k(8) k(7)
                  k(7) k(4) k(5) k(2) k(3) k(8) k(1) k(6)
                  k(8) k(3) k(2) k(5) k(4) k(7) k(6) k(1)];
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% This Matlab code was written by Ole Sigmund, Department of Solid         %
% Mechanics, Technical University of Denmark, DK-2800 Lyngby, Denmark.     %
% Please sent your comments to the author: sigmund@fam.dtu.dk              %
%                                                                          %
% The code is intended for educational purposes and theoretical details    %
% are discussed in the paper                                               %
% "A 99 line topology optimization code written in Matlab"                 %
% by Ole Sigmund (2001), Structural and Multidisciplinary Optimization,    %
% Vol 21, pp. 120--127.                                                    %
%                                                                          %
% The code as well as a postscript version of the paper can be             %
% downloaded from the web-site: http://www.topopt.dtu.dk                   %
%                                                                          %
% Disclaimer:                                                              %
% The author reserves all rights but does not guaranty that the code is    %
% free from errors. Furthermore, he shall not be liable in any event       %
% caused by the use of the program.                                        %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
